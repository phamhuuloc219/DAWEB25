using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace CMS.DataAccess
{
    /// <summary>
    /// Strongly-typed collection for the LoaiMH class.
    /// </summary>
    [Serializable]
    public partial class LoaiMHCollection : ActiveList<LoaiMH, LoaiMHCollection>
    {
        public LoaiMHCollection() { }

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LoaiMHCollection</returns>
        public LoaiMHCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LoaiMH o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }


    }
    /// <summary>
    /// This is an ActiveRecord class which wraps the LoaiMH table.
    /// </summary>
    [Serializable]
    public partial class LoaiMH : ActiveRecord<LoaiMH>, IActiveRecord
    {
        #region .ctors and Default Settings

        public LoaiMH()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public LoaiMH(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public LoaiMH(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public LoaiMH(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region Schema and Query Accessor	
        public static Query CreateQuery() { return new Query(Schema); }
        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("LoaiMH", TableType.Table, DataService.GetInstance("DataAcessProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                TableSchema.TableColumn colvarMaLMH = new TableSchema.TableColumn(schema);
                colvarMaLMH.ColumnName = "MaLMH";
                colvarMaLMH.DataType = DbType.Guid;
                colvarMaLMH.MaxLength = 0;
                colvarMaLMH.AutoIncrement = false;
                colvarMaLMH.IsNullable = false;
                colvarMaLMH.IsPrimaryKey = true;
                colvarMaLMH.IsForeignKey = false;
                colvarMaLMH.IsReadOnly = false;
                colvarMaLMH.DefaultSetting = @"";
                colvarMaLMH.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMaLMH);

                TableSchema.TableColumn colvarMoTaLMH = new TableSchema.TableColumn(schema);
                colvarMoTaLMH.ColumnName = "MoTaLMH";
                colvarMoTaLMH.DataType = DbType.String;
                colvarMoTaLMH.MaxLength = -1;
                colvarMoTaLMH.AutoIncrement = false;
                colvarMoTaLMH.IsNullable = true;
                colvarMoTaLMH.IsPrimaryKey = false;
                colvarMoTaLMH.IsForeignKey = false;
                colvarMoTaLMH.IsReadOnly = false;
                colvarMoTaLMH.DefaultSetting = @"";
                colvarMoTaLMH.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMoTaLMH);

                TableSchema.TableColumn colvarTenLMH = new TableSchema.TableColumn(schema);
                colvarTenLMH.ColumnName = "TenLMH";
                colvarTenLMH.DataType = DbType.String;
                colvarTenLMH.MaxLength = 100;
                colvarTenLMH.AutoIncrement = false;
                colvarTenLMH.IsNullable = false;
                colvarTenLMH.IsPrimaryKey = false;
                colvarTenLMH.IsForeignKey = false;
                colvarTenLMH.IsReadOnly = false;
                colvarTenLMH.DefaultSetting = @"";
                colvarTenLMH.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTenLMH);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["DataAcessProvider"].AddSchema("LoaiMH", schema);
            }
        }
        #endregion

        #region Props

        [XmlAttribute("MaLMH")]
        [Bindable(true)]
        public Guid MaLMH
        {
            get { return GetColumnValue<Guid>(Columns.MaLMH); }
            set { SetColumnValue(Columns.MaLMH, value); }
        }

        [XmlAttribute("MoTaLMH")]
        [Bindable(true)]
        public string MoTaLMH
        {
            get { return GetColumnValue<string>(Columns.MoTaLMH); }
            set { SetColumnValue(Columns.MoTaLMH, value); }
        }

        [XmlAttribute("TenLMH")]
        [Bindable(true)]
        public string TenLMH
        {
            get { return GetColumnValue<string>(Columns.TenLMH); }
            set { SetColumnValue(Columns.TenLMH, value); }
        }

        #endregion


        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        private CMS.DataAccess.MatHangCollection colMatHangRecords;
        public CMS.DataAccess.MatHangCollection MatHangRecords()
        {
            if (colMatHangRecords == null)
            {
                colMatHangRecords = new CMS.DataAccess.MatHangCollection().Where(MatHang.Columns.MaLMH, MaLMH).Load();
                colMatHangRecords.ListChanged += new ListChangedEventHandler(colMatHangRecords_ListChanged);
            }
            return colMatHangRecords;
        }

        void colMatHangRecords_ListChanged(object sender, ListChangedEventArgs e)
        {
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
                // Set foreign key value
                colMatHangRecords[e.NewIndex].MaLMH = MaLMH;
            }
        }
        #endregion



        //no foreign key tables defined (0)



        //no ManyToMany tables defined (0)



        #region ObjectDataSource support


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varMaLMH, string varMoTaLMH, string varTenLMH)
        {
            LoaiMH item = new LoaiMH();

            item.MaLMH = varMaLMH;

            item.MoTaLMH = varMoTaLMH;

            item.TenLMH = varTenLMH;


            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varMaLMH, string varMoTaLMH, string varTenLMH)
        {
            LoaiMH item = new LoaiMH();

            item.MaLMH = varMaLMH;

            item.MoTaLMH = varMoTaLMH;

            item.TenLMH = varTenLMH;

            item.IsNew = false;
            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }
        #endregion



        #region Typed Columns


        public static TableSchema.TableColumn MaLMHColumn
        {
            get { return Schema.Columns[0]; }
        }



        public static TableSchema.TableColumn MoTaLMHColumn
        {
            get { return Schema.Columns[1]; }
        }



        public static TableSchema.TableColumn TenLMHColumn
        {
            get { return Schema.Columns[2]; }
        }



        #endregion
        #region Columns Struct
        public struct Columns
        {
            public static string MaLMH = @"MaLMH";
            public static string MoTaLMH = @"MoTaLMH";
            public static string TenLMH = @"TenLMH";

        }
        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
            if (colMatHangRecords != null)
            {
                foreach (CMS.DataAccess.MatHang item in colMatHangRecords)
                {
                    if (item.MaLMH == null || item.MaLMH != MaLMH)
                    {
                        item.MaLMH = MaLMH;
                    }
                }
            }
        }
        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();

            if (colMatHangRecords != null)
            {
                colMatHangRecords.SaveAll();
            }
        }
        #endregion
    }
}
