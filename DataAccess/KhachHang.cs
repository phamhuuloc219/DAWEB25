using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace CMS.DataAccess
{
    /// <summary>
    /// Strongly-typed collection for the KhachHang class.
    /// </summary>
    [Serializable]
    public partial class KhachHangCollection : ActiveList<KhachHang, KhachHangCollection>
    {
        public KhachHangCollection() { }

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KhachHangCollection</returns>
        public KhachHangCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KhachHang o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }


    }
    /// <summary>
    /// This is an ActiveRecord class which wraps the KhachHang table.
    /// </summary>
    [Serializable]
    public partial class KhachHang : ActiveRecord<KhachHang>, IActiveRecord
    {
        #region .ctors and Default Settings

        public KhachHang()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public KhachHang(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public KhachHang(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public KhachHang(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region Schema and Query Accessor	
        public static Query CreateQuery() { return new Query(Schema); }
        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("KhachHang", TableType.Table, DataService.GetInstance("DataAcessProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                TableSchema.TableColumn colvarMaKH = new TableSchema.TableColumn(schema);
                colvarMaKH.ColumnName = "MaKH";
                colvarMaKH.DataType = DbType.Guid;
                colvarMaKH.MaxLength = 0;
                colvarMaKH.AutoIncrement = false;
                colvarMaKH.IsNullable = false;
                colvarMaKH.IsPrimaryKey = true;
                colvarMaKH.IsForeignKey = false;
                colvarMaKH.IsReadOnly = false;
                colvarMaKH.DefaultSetting = @"";
                colvarMaKH.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMaKH);

                TableSchema.TableColumn colvarTenKH = new TableSchema.TableColumn(schema);
                colvarTenKH.ColumnName = "TenKH";
                colvarTenKH.DataType = DbType.String;
                colvarTenKH.MaxLength = 100;
                colvarTenKH.AutoIncrement = false;
                colvarTenKH.IsNullable = false;
                colvarTenKH.IsPrimaryKey = false;
                colvarTenKH.IsForeignKey = false;
                colvarTenKH.IsReadOnly = false;
                colvarTenKH.DefaultSetting = @"";
                colvarTenKH.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTenKH);

                TableSchema.TableColumn colvarDienThoai = new TableSchema.TableColumn(schema);
                colvarDienThoai.ColumnName = "DienThoai";
                colvarDienThoai.DataType = DbType.String;
                colvarDienThoai.MaxLength = 20;
                colvarDienThoai.AutoIncrement = false;
                colvarDienThoai.IsNullable = true;
                colvarDienThoai.IsPrimaryKey = false;
                colvarDienThoai.IsForeignKey = false;
                colvarDienThoai.IsReadOnly = false;
                colvarDienThoai.DefaultSetting = @"";
                colvarDienThoai.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDienThoai);

                TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
                colvarEmail.ColumnName = "Email";
                colvarEmail.DataType = DbType.String;
                colvarEmail.MaxLength = 100;
                colvarEmail.AutoIncrement = false;
                colvarEmail.IsNullable = true;
                colvarEmail.IsPrimaryKey = false;
                colvarEmail.IsForeignKey = false;
                colvarEmail.IsReadOnly = false;
                colvarEmail.DefaultSetting = @"";
                colvarEmail.ForeignKeyTableName = "";
                schema.Columns.Add(colvarEmail);

                TableSchema.TableColumn colvarMatKhau = new TableSchema.TableColumn(schema);
                colvarMatKhau.ColumnName = "MatKhau";
                colvarMatKhau.DataType = DbType.AnsiString;
                colvarMatKhau.MaxLength = 255;
                colvarMatKhau.AutoIncrement = false;
                colvarMatKhau.IsNullable = true;
                colvarMatKhau.IsPrimaryKey = false;
                colvarMatKhau.IsForeignKey = false;
                colvarMatKhau.IsReadOnly = false;
                colvarMatKhau.DefaultSetting = @"";
                colvarMatKhau.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMatKhau);

                TableSchema.TableColumn colvarDiaChi = new TableSchema.TableColumn(schema);
                colvarDiaChi.ColumnName = "DiaChi";
                colvarDiaChi.DataType = DbType.String;
                colvarDiaChi.MaxLength = 255;
                colvarDiaChi.AutoIncrement = false;
                colvarDiaChi.IsNullable = true;
                colvarDiaChi.IsPrimaryKey = false;
                colvarDiaChi.IsForeignKey = false;
                colvarDiaChi.IsReadOnly = false;
                colvarDiaChi.DefaultSetting = @"";
                colvarDiaChi.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDiaChi);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["DataAcessProvider"].AddSchema("KhachHang", schema);
            }
        }
        #endregion

        #region Props

        [XmlAttribute("MaKH")]
        [Bindable(true)]
        public Guid MaKH
        {
            get { return GetColumnValue<Guid>(Columns.MaKH); }
            set { SetColumnValue(Columns.MaKH, value); }
        }

        [XmlAttribute("TenKH")]
        [Bindable(true)]
        public string TenKH
        {
            get { return GetColumnValue<string>(Columns.TenKH); }
            set { SetColumnValue(Columns.TenKH, value); }
        }

        [XmlAttribute("DienThoai")]
        [Bindable(true)]
        public string DienThoai
        {
            get { return GetColumnValue<string>(Columns.DienThoai); }
            set { SetColumnValue(Columns.DienThoai, value); }
        }

        [XmlAttribute("Email")]
        [Bindable(true)]
        public string Email
        {
            get { return GetColumnValue<string>(Columns.Email); }
            set { SetColumnValue(Columns.Email, value); }
        }

        [XmlAttribute("MatKhau")]
        [Bindable(true)]
        public string MatKhau
        {
            get { return GetColumnValue<string>(Columns.MatKhau); }
            set { SetColumnValue(Columns.MatKhau, value); }
        }

        [XmlAttribute("DiaChi")]
        [Bindable(true)]
        public string DiaChi
        {
            get { return GetColumnValue<string>(Columns.DiaChi); }
            set { SetColumnValue(Columns.DiaChi, value); }
        }

        #endregion


        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        private CMS.DataAccess.DonHangCollection colDonHangRecords;
        public CMS.DataAccess.DonHangCollection DonHangRecords()
        {
            if (colDonHangRecords == null)
            {
                colDonHangRecords = new CMS.DataAccess.DonHangCollection().Where(DonHang.Columns.MaKH, MaKH).Load();
                colDonHangRecords.ListChanged += new ListChangedEventHandler(colDonHangRecords_ListChanged);
            }
            return colDonHangRecords;
        }

        void colDonHangRecords_ListChanged(object sender, ListChangedEventArgs e)
        {
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
                // Set foreign key value
                colDonHangRecords[e.NewIndex].MaKH = MaKH;
            }
        }
        #endregion



        //no foreign key tables defined (0)



        //no ManyToMany tables defined (0)



        #region ObjectDataSource support


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varMaKH, string varTenKH, string varDienThoai, string varEmail, string varMatKhau, string varDiaChi)
        {
            KhachHang item = new KhachHang();

            item.MaKH = varMaKH;

            item.TenKH = varTenKH;

            item.DienThoai = varDienThoai;

            item.Email = varEmail;

            item.MatKhau = varMatKhau;

            item.DiaChi = varDiaChi;


            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varMaKH, string varTenKH, string varDienThoai, string varEmail, string varMatKhau, string varDiaChi)
        {
            KhachHang item = new KhachHang();

            item.MaKH = varMaKH;

            item.TenKH = varTenKH;

            item.DienThoai = varDienThoai;

            item.Email = varEmail;

            item.MatKhau = varMatKhau;

            item.DiaChi = varDiaChi;

            item.IsNew = false;
            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }
        #endregion



        #region Typed Columns


        public static TableSchema.TableColumn MaKHColumn
        {
            get { return Schema.Columns[0]; }
        }



        public static TableSchema.TableColumn TenKHColumn
        {
            get { return Schema.Columns[1]; }
        }



        public static TableSchema.TableColumn DienThoaiColumn
        {
            get { return Schema.Columns[2]; }
        }



        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[3]; }
        }



        public static TableSchema.TableColumn MatKhauColumn
        {
            get { return Schema.Columns[4]; }
        }



        public static TableSchema.TableColumn DiaChiColumn
        {
            get { return Schema.Columns[5]; }
        }



        #endregion
        #region Columns Struct
        public struct Columns
        {
            public static string MaKH = @"MaKH";
            public static string TenKH = @"TenKH";
            public static string DienThoai = @"DienThoai";
            public static string Email = @"Email";
            public static string MatKhau = @"MatKhau";
            public static string DiaChi = @"DiaChi";

        }
        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
            if (colDonHangRecords != null)
            {
                foreach (CMS.DataAccess.DonHang item in colDonHangRecords)
                {
                    if (item.MaKH == null || item.MaKH != MaKH)
                    {
                        item.MaKH = MaKH;
                    }
                }
            }
        }
        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();

            if (colDonHangRecords != null)
            {
                colDonHangRecords.SaveAll();
            }
        }
        #endregion
    }
}
