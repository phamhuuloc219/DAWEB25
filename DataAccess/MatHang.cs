using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the MatHang class.
	/// </summary>
    [Serializable]
	public partial class MatHangCollection : ActiveList<MatHang, MatHangCollection>
	{	   
		public MatHangCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>MatHangCollection</returns>
		public MatHangCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                MatHang o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the MatHang table.
	/// </summary>
	[Serializable]
	public partial class MatHang : ActiveRecord<MatHang>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public MatHang()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public MatHang(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public MatHang(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public MatHang(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MatHang", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaMH = new TableSchema.TableColumn(schema);
				colvarMaMH.ColumnName = "MaMH";
				colvarMaMH.DataType = DbType.Guid;
				colvarMaMH.MaxLength = 0;
				colvarMaMH.AutoIncrement = false;
				colvarMaMH.IsNullable = false;
				colvarMaMH.IsPrimaryKey = true;
				colvarMaMH.IsForeignKey = false;
				colvarMaMH.IsReadOnly = false;
				colvarMaMH.DefaultSetting = @"";
				colvarMaMH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaMH);
				
				TableSchema.TableColumn colvarTenMH = new TableSchema.TableColumn(schema);
				colvarTenMH.ColumnName = "TenMH";
				colvarTenMH.DataType = DbType.String;
				colvarTenMH.MaxLength = 100;
				colvarTenMH.AutoIncrement = false;
				colvarTenMH.IsNullable = false;
				colvarTenMH.IsPrimaryKey = false;
				colvarTenMH.IsForeignKey = false;
				colvarTenMH.IsReadOnly = false;
				colvarTenMH.DefaultSetting = @"";
				colvarTenMH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenMH);
				
				TableSchema.TableColumn colvarMoTaMH = new TableSchema.TableColumn(schema);
				colvarMoTaMH.ColumnName = "MoTaMH";
				colvarMoTaMH.DataType = DbType.String;
				colvarMoTaMH.MaxLength = -1;
				colvarMoTaMH.AutoIncrement = false;
				colvarMoTaMH.IsNullable = true;
				colvarMoTaMH.IsPrimaryKey = false;
				colvarMoTaMH.IsForeignKey = false;
				colvarMoTaMH.IsReadOnly = false;
				colvarMoTaMH.DefaultSetting = @"";
				colvarMoTaMH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoTaMH);
				
				TableSchema.TableColumn colvarGiaBan = new TableSchema.TableColumn(schema);
				colvarGiaBan.ColumnName = "GiaBan";
				colvarGiaBan.DataType = DbType.Decimal;
				colvarGiaBan.MaxLength = 0;
				colvarGiaBan.AutoIncrement = false;
				colvarGiaBan.IsNullable = true;
				colvarGiaBan.IsPrimaryKey = false;
				colvarGiaBan.IsForeignKey = false;
				colvarGiaBan.IsReadOnly = false;
				colvarGiaBan.DefaultSetting = @"";
				colvarGiaBan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaBan);
				
				TableSchema.TableColumn colvarAnhMH = new TableSchema.TableColumn(schema);
				colvarAnhMH.ColumnName = "AnhMH";
				colvarAnhMH.DataType = DbType.String;
				colvarAnhMH.MaxLength = 255;
				colvarAnhMH.AutoIncrement = false;
				colvarAnhMH.IsNullable = true;
				colvarAnhMH.IsPrimaryKey = false;
				colvarAnhMH.IsForeignKey = false;
				colvarAnhMH.IsReadOnly = false;
				colvarAnhMH.DefaultSetting = @"";
				colvarAnhMH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAnhMH);
				
				TableSchema.TableColumn colvarMaLMH = new TableSchema.TableColumn(schema);
				colvarMaLMH.ColumnName = "MaLMH";
				colvarMaLMH.DataType = DbType.Guid;
				colvarMaLMH.MaxLength = 0;
				colvarMaLMH.AutoIncrement = false;
				colvarMaLMH.IsNullable = true;
				colvarMaLMH.IsPrimaryKey = false;
				colvarMaLMH.IsForeignKey = true;
				colvarMaLMH.IsReadOnly = false;
				colvarMaLMH.DefaultSetting = @"";
				
					colvarMaLMH.ForeignKeyTableName = "LoaiMH";
				schema.Columns.Add(colvarMaLMH);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("MatHang",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaMH")]
		[Bindable(true)]
		public Guid MaMH 
		{
			get { return GetColumnValue<Guid>(Columns.MaMH); }
			set { SetColumnValue(Columns.MaMH, value); }
		}
		  
		[XmlAttribute("TenMH")]
		[Bindable(true)]
		public string TenMH 
		{
			get { return GetColumnValue<string>(Columns.TenMH); }
			set { SetColumnValue(Columns.TenMH, value); }
		}
		  
		[XmlAttribute("MoTaMH")]
		[Bindable(true)]
		public string MoTaMH 
		{
			get { return GetColumnValue<string>(Columns.MoTaMH); }
			set { SetColumnValue(Columns.MoTaMH, value); }
		}
		  
		[XmlAttribute("GiaBan")]
		[Bindable(true)]
		public decimal? GiaBan 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaBan); }
			set { SetColumnValue(Columns.GiaBan, value); }
		}
		  
		[XmlAttribute("AnhMH")]
		[Bindable(true)]
		public string AnhMH 
		{
			get { return GetColumnValue<string>(Columns.AnhMH); }
			set { SetColumnValue(Columns.AnhMH, value); }
		}
		  
		[XmlAttribute("MaLMH")]
		[Bindable(true)]
		public Guid? MaLMH 
		{
			get { return GetColumnValue<Guid?>(Columns.MaLMH); }
			set { SetColumnValue(Columns.MaLMH, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private CMS.DataAccess.CtdhCollection colCtdhRecords;
		public CMS.DataAccess.CtdhCollection CtdhRecords()
		{
			if(colCtdhRecords == null)
			{
				colCtdhRecords = new CMS.DataAccess.CtdhCollection().Where(Ctdh.Columns.MaMH, MaMH).Load();
				colCtdhRecords.ListChanged += new ListChangedEventHandler(colCtdhRecords_ListChanged);
			}
			return colCtdhRecords;
		}
				
		void colCtdhRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colCtdhRecords[e.NewIndex].MaMH = MaMH;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a LoaiMH ActiveRecord object related to this MatHang
		/// 
		/// </summary>
		public CMS.DataAccess.LoaiMH LoaiMH
		{
			get { return CMS.DataAccess.LoaiMH.FetchByID(this.MaLMH); }
			set { SetColumnValue("MaLMH", value.MaLMH); }
		}
		
		
		#endregion
		
		
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varMaMH,string varTenMH,string varMoTaMH,decimal? varGiaBan,string varAnhMH,Guid? varMaLMH)
		{
			MatHang item = new MatHang();
			
			item.MaMH = varMaMH;
			
			item.TenMH = varTenMH;
			
			item.MoTaMH = varMoTaMH;
			
			item.GiaBan = varGiaBan;
			
			item.AnhMH = varAnhMH;
			
			item.MaLMH = varMaLMH;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varMaMH,string varTenMH,string varMoTaMH,decimal? varGiaBan,string varAnhMH,Guid? varMaLMH)
		{
			MatHang item = new MatHang();
			
				item.MaMH = varMaMH;
			
				item.TenMH = varTenMH;
			
				item.MoTaMH = varMoTaMH;
			
				item.GiaBan = varGiaBan;
			
				item.AnhMH = varAnhMH;
			
				item.MaLMH = varMaLMH;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaMHColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TenMHColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MoTaMHColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaBanColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AnhMHColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MaLMHColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaMH = @"MaMH";
			 public static string TenMH = @"TenMH";
			 public static string MoTaMH = @"MoTaMH";
			 public static string GiaBan = @"GiaBan";
			 public static string AnhMH = @"AnhMH";
			 public static string MaLMH = @"MaLMH";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colCtdhRecords != null)
                {
                    foreach (CMS.DataAccess.Ctdh item in colCtdhRecords)
                    {
                        if (item.MaMH != MaMH)
                        {
                            item.MaMH = MaMH;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colCtdhRecords != null)
                {
                    colCtdhRecords.SaveAll();
               }
		}
        #endregion
	}
}
