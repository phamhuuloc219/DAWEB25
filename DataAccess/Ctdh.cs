using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the Ctdh class.
	/// </summary>
    [Serializable]
	public partial class CtdhCollection : ActiveList<Ctdh, CtdhCollection>
	{	   
		public CtdhCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CtdhCollection</returns>
		public CtdhCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Ctdh o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the CTDH table.
	/// </summary>
	[Serializable]
	public partial class Ctdh : ActiveRecord<Ctdh>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Ctdh()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Ctdh(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Ctdh(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Ctdh(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CTDH", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaDH = new TableSchema.TableColumn(schema);
				colvarMaDH.ColumnName = "MaDH";
				colvarMaDH.DataType = DbType.AnsiString;
				colvarMaDH.MaxLength = 10;
				colvarMaDH.AutoIncrement = false;
				colvarMaDH.IsNullable = false;
				colvarMaDH.IsPrimaryKey = true;
				colvarMaDH.IsForeignKey = true;
				colvarMaDH.IsReadOnly = false;
				colvarMaDH.DefaultSetting = @"";
				
					colvarMaDH.ForeignKeyTableName = "DonHang";
				schema.Columns.Add(colvarMaDH);
				
				TableSchema.TableColumn colvarMaMH = new TableSchema.TableColumn(schema);
				colvarMaMH.ColumnName = "MaMH";
				colvarMaMH.DataType = DbType.Guid;
				colvarMaMH.MaxLength = 0;
				colvarMaMH.AutoIncrement = false;
				colvarMaMH.IsNullable = false;
				colvarMaMH.IsPrimaryKey = true;
				colvarMaMH.IsForeignKey = true;
				colvarMaMH.IsReadOnly = false;
				colvarMaMH.DefaultSetting = @"";
				
					colvarMaMH.ForeignKeyTableName = "MatHang";
				schema.Columns.Add(colvarMaMH);
				
				TableSchema.TableColumn colvarSlb = new TableSchema.TableColumn(schema);
				colvarSlb.ColumnName = "SLB";
				colvarSlb.DataType = DbType.Int32;
				colvarSlb.MaxLength = 0;
				colvarSlb.AutoIncrement = false;
				colvarSlb.IsNullable = true;
				colvarSlb.IsPrimaryKey = false;
				colvarSlb.IsForeignKey = false;
				colvarSlb.IsReadOnly = false;
				colvarSlb.DefaultSetting = @"";
				colvarSlb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSlb);
				
				TableSchema.TableColumn colvarDgb = new TableSchema.TableColumn(schema);
				colvarDgb.ColumnName = "DGB";
				colvarDgb.DataType = DbType.Decimal;
				colvarDgb.MaxLength = 0;
				colvarDgb.AutoIncrement = false;
				colvarDgb.IsNullable = true;
				colvarDgb.IsPrimaryKey = false;
				colvarDgb.IsForeignKey = false;
				colvarDgb.IsReadOnly = false;
				colvarDgb.DefaultSetting = @"";
				colvarDgb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDgb);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("CTDH",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaDH")]
		[Bindable(true)]
		public string MaDH 
		{
			get { return GetColumnValue<string>(Columns.MaDH); }
			set { SetColumnValue(Columns.MaDH, value); }
		}
		  
		[XmlAttribute("MaMH")]
		[Bindable(true)]
		public Guid MaMH 
		{
			get { return GetColumnValue<Guid>(Columns.MaMH); }
			set { SetColumnValue(Columns.MaMH, value); }
		}
		  
		[XmlAttribute("Slb")]
		[Bindable(true)]
		public int? Slb 
		{
			get { return GetColumnValue<int?>(Columns.Slb); }
			set { SetColumnValue(Columns.Slb, value); }
		}
		  
		[XmlAttribute("Dgb")]
		[Bindable(true)]
		public decimal? Dgb 
		{
			get { return GetColumnValue<decimal?>(Columns.Dgb); }
			set { SetColumnValue(Columns.Dgb, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a DonHang ActiveRecord object related to this Ctdh
		/// 
		/// </summary>
		public CMS.DataAccess.DonHang DonHang
		{
			get { return CMS.DataAccess.DonHang.FetchByID(this.MaDH); }
			set { SetColumnValue("MaDH", value.MaDH); }
		}
		
		
		/// <summary>
		/// Returns a MatHang ActiveRecord object related to this Ctdh
		/// 
		/// </summary>
		public CMS.DataAccess.MatHang MatHang
		{
			get { return CMS.DataAccess.MatHang.FetchByID(this.MaMH); }
			set { SetColumnValue("MaMH", value.MaMH); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaDH,Guid varMaMH,int? varSlb,decimal? varDgb)
		{
			Ctdh item = new Ctdh();
			
			item.MaDH = varMaDH;
			
			item.MaMH = varMaMH;
			
			item.Slb = varSlb;
			
			item.Dgb = varDgb;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varMaDH,Guid varMaMH,int? varSlb,decimal? varDgb)
		{
			Ctdh item = new Ctdh();
			
				item.MaDH = varMaDH;
			
				item.MaMH = varMaMH;
			
				item.Slb = varSlb;
			
				item.Dgb = varDgb;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaDHColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaMHColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SlbColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DgbColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaDH = @"MaDH";
			 public static string MaMH = @"MaMH";
			 public static string Slb = @"SLB";
			 public static string Dgb = @"DGB";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
