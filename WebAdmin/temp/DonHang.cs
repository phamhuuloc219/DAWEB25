using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the DonHang class.
	/// </summary>
    [Serializable]
	public partial class DonHangCollection : ActiveList<DonHang, DonHangCollection>
	{	   
		public DonHangCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DonHangCollection</returns>
		public DonHangCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DonHang o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DonHang table.
	/// </summary>
	[Serializable]
	public partial class DonHang : ActiveRecord<DonHang>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DonHang()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DonHang(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DonHang(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DonHang(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DonHang", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaDH = new TableSchema.TableColumn(schema);
				colvarMaDH.ColumnName = "MaDH";
				colvarMaDH.DataType = DbType.AnsiString;
				colvarMaDH.MaxLength = 10;
				colvarMaDH.AutoIncrement = false;
				colvarMaDH.IsNullable = false;
				colvarMaDH.IsPrimaryKey = true;
				colvarMaDH.IsForeignKey = false;
				colvarMaDH.IsReadOnly = false;
				colvarMaDH.DefaultSetting = @"";
				colvarMaDH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDH);
				
				TableSchema.TableColumn colvarNgayBan = new TableSchema.TableColumn(schema);
				colvarNgayBan.ColumnName = "NgayBan";
				colvarNgayBan.DataType = DbType.AnsiString;
				colvarNgayBan.MaxLength = 0;
				colvarNgayBan.AutoIncrement = false;
				colvarNgayBan.IsNullable = true;
				colvarNgayBan.IsPrimaryKey = false;
				colvarNgayBan.IsForeignKey = false;
				colvarNgayBan.IsReadOnly = false;
				colvarNgayBan.DefaultSetting = @"";
				colvarNgayBan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayBan);
				
				TableSchema.TableColumn colvarMaKH = new TableSchema.TableColumn(schema);
				colvarMaKH.ColumnName = "MaKH";
				colvarMaKH.DataType = DbType.Guid;
				colvarMaKH.MaxLength = 0;
				colvarMaKH.AutoIncrement = false;
				colvarMaKH.IsNullable = true;
				colvarMaKH.IsPrimaryKey = false;
				colvarMaKH.IsForeignKey = true;
				colvarMaKH.IsReadOnly = false;
				colvarMaKH.DefaultSetting = @"";
				
					colvarMaKH.ForeignKeyTableName = "KhachHang";
				schema.Columns.Add(colvarMaKH);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("DonHang",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaDH")]
		[Bindable(true)]
		public string MaDH 
		{
			get { return GetColumnValue<string>(Columns.MaDH); }
			set { SetColumnValue(Columns.MaDH, value); }
		}
		  
		[XmlAttribute("NgayBan")]
		[Bindable(true)]
		public string NgayBan 
		{
			get { return GetColumnValue<string>(Columns.NgayBan); }
			set { SetColumnValue(Columns.NgayBan, value); }
		}
		  
		[XmlAttribute("MaKH")]
		[Bindable(true)]
		public Guid? MaKH 
		{
			get { return GetColumnValue<Guid?>(Columns.MaKH); }
			set { SetColumnValue(Columns.MaKH, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private CMS.DataAccess.CtdhCollection colCtdhRecords;
		public CMS.DataAccess.CtdhCollection CtdhRecords()
		{
			if(colCtdhRecords == null)
			{
				colCtdhRecords = new CMS.DataAccess.CtdhCollection().Where(Ctdh.Columns.MaDH, MaDH).Load();
				colCtdhRecords.ListChanged += new ListChangedEventHandler(colCtdhRecords_ListChanged);
			}
			return colCtdhRecords;
		}
				
		void colCtdhRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colCtdhRecords[e.NewIndex].MaDH = MaDH;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a KhachHang ActiveRecord object related to this DonHang
		/// 
		/// </summary>
		public CMS.DataAccess.KhachHang KhachHang
		{
			get { return CMS.DataAccess.KhachHang.FetchByID(this.MaKH); }
			set { SetColumnValue("MaKH", value.MaKH); }
		}
		
		
		#endregion
		
		
		
		#region Many To Many Helpers
		
		 
		public CMS.DataAccess.MatHangCollection GetMatHangCollection() { return DonHang.GetMatHangCollection(this.MaDH); }
		public static CMS.DataAccess.MatHangCollection GetMatHangCollection(string varMaDH)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[MatHang] INNER JOIN [CTDH] ON [MatHang].[MaMH] = [CTDH].[MaMH] WHERE [CTDH].[MaDH] = @MaDH", DonHang.Schema.Provider.Name);
			cmd.AddParameter("@MaDH", varMaDH, DbType.AnsiString);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			MatHangCollection coll = new MatHangCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveMatHangMap(string varMaDH, MatHangCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [CTDH] WHERE [CTDH].[MaDH] = @MaDH", DonHang.Schema.Provider.Name);
			cmdDel.AddParameter("@MaDH", varMaDH, DbType.AnsiString);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (MatHang item in items)
			{
				Ctdh varCtdh = new Ctdh();
				varCtdh.SetColumnValue("MaDH", varMaDH);
				varCtdh.SetColumnValue("MaMH", item.GetPrimaryKeyValue());
				varCtdh.Save();
			}
		}
		public static void SaveMatHangMap(string varMaDH, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [CTDH] WHERE [CTDH].[MaDH] = @MaDH", DonHang.Schema.Provider.Name);
			cmdDel.AddParameter("@MaDH", varMaDH, DbType.AnsiString);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					Ctdh varCtdh = new Ctdh();
					varCtdh.SetColumnValue("MaDH", varMaDH);
					varCtdh.SetColumnValue("MaMH", l.Value);
					varCtdh.Save();
				}
			}
		}
		public static void SaveMatHangMap(string varMaDH , Guid[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [CTDH] WHERE [CTDH].[MaDH] = @MaDH", DonHang.Schema.Provider.Name);
			cmdDel.AddParameter("@MaDH", varMaDH, DbType.AnsiString);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (Guid item in itemList) 
			{
				Ctdh varCtdh = new Ctdh();
				varCtdh.SetColumnValue("MaDH", varMaDH);
				varCtdh.SetColumnValue("MaMH", item);
				varCtdh.Save();
			}
		}
		
		public static void DeleteMatHangMap(string varMaDH) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [CTDH] WHERE [CTDH].[MaDH] = @MaDH", DonHang.Schema.Provider.Name);
			cmdDel.AddParameter("@MaDH", varMaDH, DbType.AnsiString);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaDH,string varNgayBan,Guid? varMaKH)
		{
			DonHang item = new DonHang();
			
			item.MaDH = varMaDH;
			
			item.NgayBan = varNgayBan;
			
			item.MaKH = varMaKH;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varMaDH,string varNgayBan,Guid? varMaKH)
		{
			DonHang item = new DonHang();
			
				item.MaDH = varMaDH;
			
				item.NgayBan = varNgayBan;
			
				item.MaKH = varMaKH;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaDHColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayBanColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKHColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaDH = @"MaDH";
			 public static string NgayBan = @"NgayBan";
			 public static string MaKH = @"MaKH";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colCtdhRecords != null)
                {
                    foreach (CMS.DataAccess.Ctdh item in colCtdhRecords)
                    {
                        if (item.MaDH != MaDH)
                        {
                            item.MaDH = MaDH;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colCtdhRecords != null)
                {
                    colCtdhRecords.SaveAll();
               }
		}
        #endregion
	}
}
